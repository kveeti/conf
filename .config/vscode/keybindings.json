[
  // moving between splits / groups with ctrl + hjkl
  {
    "command": "workbench.action.focusLeftGroup",
    "when": "sideBarFocus || editorTextFocus && vim.active && vim.mode != 'Insert'",
    "key": "ctrl+h"
  },
  {
    "command": "workbench.action.focusRightGroup",
    "when": "sideBarFocus || editorTextFocus && vim.active && vim.mode != 'Insert'",
    "key": "ctrl+l"
  },
  {
    "command": "workbench.action.focusAboveGroup",
    "when": "sideBarFocus || editorTextFocus && vim.active && vim.mode != 'Insert'",
    "key": "ctrl+k"
  },
  {
    "command": "workbench.action.focusBelowGroup",
    "when": "sideBarFocus || editorTextFocus && vim.active && vim.mode != 'Insert'",
    "key": "ctrl+j"
  },
  // --

  // ctrl+n & ctrl+p as next & prev in menus
  {
    "command": "runCommands",
    "key": "ctrl+n",
    "when": "!inputFocus",
    "args": {
      "commands": [
        "list.focusDown",
        "quickInput.next",
        "selectNextSuggestion",
        "selectNextCodeAction"
      ]
    }
  },
  {
    "command": "runCommands",
    "key": "ctrl+p",
    "when": "!inputFocus",
    "args": {
      "commands": [
        "list.focusUp",
        "quickInput.previous",
        "selectPrevSuggestion",
        "selectPrevCodeAction"
      ]
    }
  },
  // --

  // make custom vim normal mode bindings in settings.json to work everywhere
  {
    "key": "space x",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "!inputFocus && sideBarFocus"
  },
  {
    "key": "space x",
    "command": "workbench.files.action.focusFilesExplorer",
    "when": "!inputFocus&&!sideBarFocus && activeViewlet == 'workbench.view.explorer'"
  },
  {
    "key": "space f",
    "command": "workbench.action.quickOpen",
    "when": "!inputFocus"
  },
  {
    "key": "space p",
    "command": "workbench.action.showCommands",
    "when": "!inputFocus"
  },
  // --

  {
    "command": "editor.action.showHover",
    "when": "editorTextFocus",
    "key": "shift+k"
  },

  // file management
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "n",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "shift+n",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y y",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  // --
  {
    "key": "u",
    "command": "undo",
    "when": "editorTextFocus && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+r",
    "command": "redo",
    "when": "editorTextFocus && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.navigateBack",
    "when": "editorTextFocus && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.navigateForward",
    "when": "editorTextFocus && vim.mode != 'Insert'"
  }
]
